{"version":3,"sources":["../src/getOpenAIBody.ts","../src/schemas.ts"],"sourcesContent":["import type OpenAI from \"openai\"\nimport { z } from \"zod\"\nimport { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\"\n\nimport { MessageSchema, PlaygroundState } from \"./schemas\"\nimport { compileLTTemplate } from \"./template\"\n\nextendZodWithOpenApi(z)\n\nexport const bodyMetadataSchema = z\n  .record(z.string().max(64), z.union([z.string(), z.number()]))\n  .optional()\n\nexport const langtailBodySchema = z.object({\n  doNotRecord: z.boolean().optional().openapi({\n    description:\n      \"If true, potentially sensitive data like the prompt and response will not be recorded in the logs\",\n    example: false,\n  }),\n  metadata: bodyMetadataSchema,\n  _langtailTestRunId: z.string().optional(),\n  _langtailTestInputId: z.string().optional(),\n})\n\nexport const openAiBodySchema = z.object({\n  stream: z.boolean().optional().openapi({ example: false }),\n  user: z.string().optional().openapi({\n    description: \"A unique identifier representing your end-user\",\n    example: \"user_123\",\n  }),\n\n  seed: z.number().optional().openapi({\n    description: \"A seed is used  to generate reproducible results\",\n    example: 123,\n  }),\n\n  variables: z.record(z.string(), z.string()).optional(),\n\n  messages: z\n    .array(MessageSchema)\n    .optional()\n    .openapi({\n      description: \"Additional messages to seed the conversation with\",\n      example: [\n        {\n          role: \"user\",\n          content: \"Hello\",\n        },\n      ],\n    }),\n})\n\nexport const bothBodySchema = langtailBodySchema.merge(openAiBodySchema)\n\nexport type IncomingBodyType = z.infer<typeof bothBodySchema>\nexport type OpenAiBodyType = z.infer<typeof openAiBodySchema>\n\n// TODO remove this from our prompt-API when this is merged so that we don't have this code duplicated\nexport function getOpenAIBody(\n  completionConfig: PlaygroundState,\n  parsedBody: IncomingBodyType,\n) {\n  const completionArgs = completionConfig.state.args\n\n  const inputMessages = [\n    ...completionConfig.state.template.map((item) => {\n      const needsCompilation =\n        typeof item.content === \"string\" ? item.content?.includes(\"{{\") : true\n\n      return {\n        ...item,\n        content:\n          item.content &&\n          (needsCompilation\n            ? compileLTTemplate(\n                item.content,\n                parsedBody.variables as Record<string, string>,\n              )\n            : item.content),\n      }\n    }),\n    ...(parsedBody.messages ?? []),\n  ]\n  const openAIbody: OpenAI.Chat.ChatCompletionCreateParams = {\n    model: completionArgs.model,\n    max_tokens:\n      completionArgs.max_tokens == -1 ? undefined : completionArgs.max_tokens,\n    temperature: completionArgs.temperature,\n    // @ts-expect-error\n    messages: inputMessages,\n    top_p: completionArgs.top_p,\n    presence_penalty: completionArgs.presence_penalty,\n    frequency_penalty: completionArgs.frequency_penalty,\n    ...(completionArgs.jsonmode\n      ? {\n          response_format: {\n            type: \"json_object\",\n          },\n        }\n      : {}),\n    ...(parsedBody.seed || completionArgs.seed\n      ? {\n          seed: parsedBody.seed ?? completionArgs.seed,\n        }\n      : {}),\n    ...(Array.isArray(completionArgs.stop) && completionArgs.stop.length > 0\n      ? { stop: completionArgs.stop }\n      : {}),\n  }\n  if (\n    completionConfig.state.functions &&\n    completionConfig.state.functions.length > 0\n  ) {\n    openAIbody.functions = completionConfig.state.functions\n  }\n  if (completionConfig.state.tools && completionConfig.state.tools.length > 0) {\n    // Remove tools[0].function.id from the tools array as that is an internal langtail id\n    openAIbody.tools = completionConfig.state.tools.map((tool) => {\n      const { id: _, ...rest } = tool.function\n      return { ...tool, function: rest }\n    })\n  }\n  return openAIbody\n}\n\nexport type ChatCompletionCreateParams = OpenAI.Chat.ChatCompletionCreateParams\n","import { z } from \"zod\"\n\nexport interface ChatState {\n  type: \"chat\"\n  template: PlaygroundMessage[]\n  functions?: Functions[]\n  tools?: Tools[]\n  args: ModelParameter\n}\n\nexport type ModelParameter = {\n  model: string\n  temperature: number\n  max_tokens: number\n  top_p: number\n  stop?: string[]\n  presence_penalty: number\n  frequency_penalty: number\n  stream?: boolean\n  jsonmode?: boolean\n  seed?: number | null\n}\n\nexport interface Functions {\n  name: string\n  description: string\n  parameters: Record<string, unknown>\n  id?: string\n}\n\nexport interface Tools {\n  type: \"function\"\n  function: Functions\n}\n\nexport interface CompletionState {\n  type: \"completion\"\n  template: string\n  args: ModelParameter\n}\n\nexport interface ContentItemText {\n  type: \"text\"\n  text: string\n}\n\nexport interface ContentItemImage {\n  type: \"image_url\"\n  image_url: {\n    url: string\n    detail?: \"auto\" | \"low\" | \"high\"\n  }\n}\n\nexport type ContentArray = Array<ContentItemText | ContentItemImage>\n\nexport interface ToolCall {\n  id: string\n  type: \"function\"\n  function: {\n    name: string\n    arguments: string\n  }\n}\n\nexport interface Message {\n  role: \"assistant\" | \"user\" | \"system\" | \"function\" | \"tool\"\n  name?: string\n  content: string | ContentArray | null\n  function_call?: {\n    name: string\n    arguments: string\n  }\n  tool_calls?: ToolCall[]\n  tool_choice?:\n    | {\n        type: \"function\"\n        function: {\n          name: string\n        }\n      }\n    | \"auto\"\n    | \"none\"\n  tool_call_id?: string\n  // NOTE: dynamic property calculated by the client for the diff view\n  hash?: string\n}\n\nexport interface PlaygroundMessage extends Message {\n  pending?: boolean\n  error?: unknown\n}\n\nexport interface PlaygroundState {\n  state: ChatState\n  chatInput: Record<string, string>\n}\n\nexport const ContentItemTextSchema = z.object({\n  type: z.literal(\"text\"),\n  text: z.string(),\n}) satisfies z.ZodType<ContentItemText>\n\nexport const ContentItemImageSchema = z.object({\n  type: z.literal(\"image_url\"),\n  image_url: z.object({\n    url: z.string(),\n    detail: z.enum([\"auto\", \"low\", \"high\"]).default(\"auto\"),\n  }),\n}) satisfies z.ZodType<ContentItemImage>\n\nconst ContentArraySchema = z.array(\n  z.union([ContentItemTextSchema, ContentItemImageSchema]),\n) satisfies z.ZodType<ContentArray>\n\nconst FunctionCallSchema = z.object({\n  name: z.string(),\n  arguments: z.string(),\n})\n\nconst ToolCallSchema = z.object({\n  id: z.string(),\n  type: z.literal(\"function\"),\n  function: FunctionCallSchema,\n}) satisfies z.ZodType<ToolCall>\n\nconst ToolChoiceSchema = z.union([\n  z.literal(\"auto\"),\n  z.literal(\"none\"),\n  z.object({\n    type: z.literal(\"function\"),\n    function: z.object({\n      name: z.string(),\n    }),\n  }),\n])\n\nexport const MessageSchema = z.object({\n  role: z.union([\n    z.literal(\"assistant\"),\n    z.literal(\"user\"),\n    z.literal(\"system\"),\n    z.literal(\"function\"),\n    z.literal(\"tool\"),\n  ]),\n  name: z.string().optional(),\n  content: ContentArraySchema.or(z.string().nullable()),\n  function_call: FunctionCallSchema.optional(),\n  tool_calls: z.array(ToolCallSchema).optional(),\n  tool_choice: ToolChoiceSchema.optional(),\n  tool_call_id: z.string().optional(),\n}) satisfies z.ZodType<Message>\n"],"mappings":"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","names":["z","z"]}