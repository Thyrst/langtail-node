{"version":3,"sources":["../src/LangtailNode.ts","../src/LangtailPrompts.ts","../package.json","../src/userAgent.ts"],"sourcesContent":["import OpenAI from \"openai\"\nimport * as Core from \"openai/core\"\nimport { LangtailPrompts } from \"./LangtailPrompts\"\nimport {\n  ChatCompletionCreateParamsStreaming,\n  Completions,\n} from \"openai/resources/index\"\nimport {\n  ChatCompletion,\n  ChatCompletionChunk,\n  ChatCompletionCreateParams,\n  ChatCompletionCreateParamsBase,\n  ChatCompletionCreateParamsNonStreaming,\n} from \"openai/resources/chat/completions\"\nimport { APIPromise } from \"openai/core\"\nimport { Stream } from \"openai/src/streaming\"\nimport { userAgent } from \"./userAgent\"\n\n\nexport const baseURL = \"https://proxy.langtail.com/v1\"\n\nexport interface ILangtailExtraProps {\n  doNotRecord?: boolean\n  metadata?: Record<string, any>\n}\n\nexport class LangtailNode {\n  prompts: LangtailPrompts\n  chat: {\n    completions: {\n      create(\n        body: ChatCompletionCreateParamsNonStreaming & ILangtailExtraProps,\n        options?: Core.RequestOptions,\n      ): APIPromise<ChatCompletion>\n      create(\n        body: ChatCompletionCreateParamsStreaming & ILangtailExtraProps,\n        options?: Core.RequestOptions,\n      ): APIPromise<Stream<ChatCompletionChunk>>\n      create(\n        body: ChatCompletionCreateParamsBase & ILangtailExtraProps,\n        options?: Core.RequestOptions,\n      ): APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>\n      create(\n        body: ChatCompletionCreateParams & ILangtailExtraProps,\n        options?: Core.RequestOptions,\n      ): APIPromise<ChatCompletion> | APIPromise<Stream<ChatCompletionChunk>>\n    }\n  }\n\n  private _open_ai: OpenAI\n\n  constructor(options?: {\n    apiKey: string\n    baseURL?: string\n    doNotRecord?: boolean\n    organization?: string\n    project?: string\n    fetch?: Core.Fetch\n  }) {\n    const organization = options?.organization\n\n    const apiKey = options?.apiKey || process.env.LANGTAIL_API_KEY\n    if (!apiKey) {\n      throw new Error(\n        \"apiKey is required. You can pass it as an option or set the LANGTAIL_API_KEY environment variable.\",\n      )\n    }\n    const optionsToPass = {\n      baseURL: baseURL,\n      apiKey,\n      fetch: options?.fetch,\n    }\n\n    const defaultHeaders: Record<string, string> = {}\n    if (options?.doNotRecord) {\n      defaultHeaders[\"x-langtail-do-not-record\"] = \"true\"\n    }\n    this._open_ai = new OpenAI({\n      defaultHeaders: {\n        ...defaultHeaders,\n        \"x-langtail-organization\": organization,\n      },\n      ...optionsToPass,\n    })\n\n    this.prompts = new LangtailPrompts({\n      apiKey,\n      workspace: options?.organization,\n      project: options?.project,\n    })\n\n    this.chat = {\n      completions: {\n        // @ts-expect-error\n        create: (\n          params: ChatCompletionCreateParamsBase & ILangtailExtraProps,\n          options: Core.RequestOptions = {},\n        ) => {\n          if (params.doNotRecord) {\n            options.headers = {\n              [\"x-langtail-do-not-record\"]: \"true\",\n              'user-agent': userAgent,\n              ...options?.headers,\n            }\n          }\n          delete params.doNotRecord // openAI does not support these parameters\n\n          if (params.metadata) {\n            const metadataHeaders = Object.entries(params.metadata).reduce(\n              (acc, [key, value]) => {\n                acc[`x-langtail-metadata-${key}`] = value\n                return acc\n              },\n              {},\n            )\n            options.headers = {\n              ...metadataHeaders,\n              ...options?.headers,\n            }\n          }\n          delete params.metadata\n\n          return this._open_ai.chat.completions.create(params, options)\n        },\n      },\n    }\n\n    return this\n  }\n}\n\nexport { LangtailNode as Langtail }\nexport { LangtailPrompts as LangtailPrompts }\n","import {\n  ChatCompletion,\n  ChatCompletionAssistantMessageParam,\n} from \"openai/resources/chat/completions\"\nimport { ChatCompletionChunk } from \"openai/resources/chat/completions\"\n\nimport { Stream } from \"openai/streaming\"\nimport { ILangtailExtraProps } from \"./LangtailNode\"\nimport { Fetch } from \"openai/core\"\nimport { userAgent } from \"./userAgent\"\nimport queryString from \"query-string\"\nimport { PlaygroundState } from \"./schemas\"\nimport { OpenAiBodyType, getOpenAIBody } from \"./getOpenAIBody\"\n\nexport type Environment = \"preview\" | \"staging\" | \"production\"\n\ninterface LangtailPromptVariables {} // TODO use this when generating schema for deployed prompts\n\ntype StreamResponseType = Stream<ChatCompletionChunk>\n\ntype OpenAIResponseWithHttp = ChatCompletion & {\n  httpResponse: Response | globalThis.Response\n}\n\ntype Options = {\n  apiKey: string\n  baseURL?: string | undefined\n  workspace?: string | undefined\n  project?: string | undefined\n  fetch?: Fetch\n}\n\ninterface IRequestParams extends ILangtailExtraProps {\n  prompt: string\n  environment?: Environment\n  version?: string\n  variables?: Record<string, any>\n  messages?: ChatCompletionAssistantMessageParam[]\n}\n\ninterface IRequestParamsStream extends IRequestParams {\n  stream: boolean\n}\n\nexport class LangtailPrompts {\n  apiKey: string\n  baseUrl: string\n  options: Options\n\n  constructor(options: Options) {\n    const { apiKey, baseURL: baseUrl } = options\n    this.apiKey = apiKey\n    this.baseUrl = baseUrl ?? \"https://api.langtail.com\"\n    this.options = options\n  }\n\n  _createPromptPath({\n    prompt,\n    environment,\n    version,\n    configGet,\n  }: {\n    prompt: string\n    environment: Environment\n    version?: string\n    configGet?: boolean\n  }) {\n    if (prompt.includes(\"/\")) {\n      throw new Error(\n        \"prompt should not include / character, either omit workspace/project or use just the prompt name.\",\n      )\n    }\n    const queryParams = queryString.stringify({\n      v: version,\n      \"open-ai-completion-config-payload\": configGet,\n    })\n\n    if (this.options.workspace && this.options.project) {\n      const url = `${this.baseUrl}/${this.options.workspace}/${this.options.project}/${prompt}/${environment}?${queryParams}`\n      // user supplied workspace and project in constructor\n\n      return url\n    }\n\n    if (this.options.project) {\n      return `${this.options.project}/${prompt}/${environment}?${queryParams}`\n    }\n\n    const urlPath = `project-prompt/${prompt}/${environment}`\n    return urlPath.startsWith(\"/\")\n      ? this.baseUrl + urlPath + `?${queryParams}`\n      : `${this.baseUrl}/${urlPath}?${queryParams}`\n  }\n\n  invoke(options: IRequestParams): Promise<OpenAIResponseWithHttp>\n\n  invoke(options: IRequestParamsStream): Promise<StreamResponseType>\n  async invoke({\n    prompt,\n    environment,\n    doNotRecord,\n    metadata,\n    ...rest\n  }: IRequestParams | IRequestParamsStream) {\n    const metadataHeaders = metadata\n      ? Object.entries(metadata).reduce((acc, [key, value]) => {\n          acc[`x-langtail-metadata-${key}`] = value\n          return acc\n        }, {})\n      : {}\n\n    const fetchInit = {\n      method: \"POST\",\n      headers: {\n        \"X-API-Key\": this.apiKey,\n        \"user-agent\": userAgent,\n        \"content-type\": \"application/json\",\n        \"x-langtail-do-not-record\": doNotRecord ? \"true\" : \"false\",\n        ...metadataHeaders,\n      },\n      body: JSON.stringify({ stream: false, ...rest }),\n    }\n    const promptPath = this._createPromptPath({\n      prompt,\n      environment: environment ?? \"production\",\n      version: rest.version,\n    })\n\n    let res: Response | globalThis.Response\n\n    if (this.options.fetch) {\n      res = await this.options.fetch(promptPath, fetchInit)\n    } else {\n      res = await fetch(promptPath, fetchInit)\n    }\n\n    if (!res.ok) {\n      throw new Error(\n        `Failed to fetch prompt: ${res.status} ${await res.text()}`,\n      )\n    }\n\n    if (\"stream\" in rest && rest.stream) {\n      if (!res.body) {\n        throw new Error(\"No body in response\")\n      }\n      return Stream.fromSSEResponse(res, new AbortController())\n    }\n\n    const result = (await res.json()) as OpenAIResponseWithHttp\n    result.httpResponse = res\n    return result\n  }\n\n  async get({\n    prompt,\n    environment,\n    version,\n  }: {\n    prompt: string\n    environment: Environment\n    version?: string\n  }): Promise<PlaygroundState> {\n    const promptPath = this._createPromptPath({ prompt, environment, version })\n\n    const res = await fetch(promptPath, {\n      headers: {\n        \"X-API-Key\": this.apiKey,\n        \"user-agent\": userAgent,\n        \"content-type\": \"application/json\",\n      },\n    })\n\n    if (!res.ok) {\n      throw new Error(\n        `Failed to fetch prompt config payload: ${res.status} ${await res.text()}`,\n      )\n    }\n\n    return res.json()\n  }\n\n  build(completionConfig: PlaygroundState, parsedBody: OpenAiBodyType) {\n    return getOpenAIBody(completionConfig, parsedBody)\n  }\n}\n","{\n  \"name\": \"langtail\",\n  \"version\": \"0.3.0-beta.1\",\n  \"description\": \"\",\n  \"main\": \"./dist/LangtailNode.js\",\n  \"packageManager\": \"pnpm@8.15.6\",\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"ts\": \"tsc --noEmit\",\n    \"format\": \"prettier --write .\",\n    \"build\": \"tsup\",\n    \"prepublishOnly\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"openai\",\n    \"langtail\",\n    \"nlp\",\n    \"ai\",\n    \"natural language processing\",\n    \"gpt-3\",\n    \"gpt-4\",\n    \"anthropic\"\n  ],\n  \"authors\": [\n    \"Langtail <hi@langtail.com>\"\n  ],\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@types/node\": \"^20.12.7\",\n    \"dotenv\": \"^16.4.5\",\n    \"nock\": \"14.0.0-beta.5\",\n    \"prettier\": \"^3.2.5\",\n    \"tsup\": \"^8.0.2\",\n    \"typescript\": \"^5.4.5\",\n    \"vitest\": \"^1.5.2\"\n  },\n  \"module\": \"./dist/LangtailNode.mjs\",\n  \"types\": \"./dist/LangtailNode.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"require\": \"./dist/LangtailNode.js\",\n      \"import\": \"./dist/LangtailNode.mjs\",\n      \"types\": \"./dist/LangtailNode.d.ts\"\n    }\n  },\n  \"files\": [\n    \"dist\",\n    \"src\"\n  ],\n  \"dependencies\": {\n    \"@asteasolutions/zod-to-openapi\": \"^7.0.0\",\n    \"@langtail/handlebars-evalless\": \"^0.0.1\",\n    \"date-fns\": \"^3.6.0\",\n    \"handlebars\": \"^4.7.8\",\n    \"openai\": \"^4.38.5\",\n    \"query-string\": \"^9.0.0\",\n    \"zod\": \"^3.23.4\"\n  },\n  \"tsup\": {\n    \"dts\": true,\n    \"sourcemap\": true,\n    \"format\": [\n      \"cjs\",\n      \"esm\"\n    ],\n    \"clean\": true,\n    \"entryPoints\": [\n      \"src/LangtailNode.ts\",\n      \"src/template.ts\",\n      \"src/getOpenAIBody.ts\"\n    ]\n  }\n}\n","import packageJson from \"../package.json\"\n\nexport const userAgent = `langtail-js-sdk:${packageJson.version}`"],"mappings":"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","names":["options"]}